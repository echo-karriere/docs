{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"echo karriere documentation \u00b6 This site is the main collection of the whats and whys of the development team at echo karriere . It is a heavy work in progress, so expect changes to occur at a rapid pace. Who? \u00b6 echo karriere is developed by a team of student volunteers, in no particular order: Mathias B\u00f8e Sondre Nilsen Marie Heggebakk Karl Oscar Warpe Mathias Vab\u00f8 Christian Hein What? \u00b6 We develop the entire stack that runs the events that echo karriere arranges, primarily the career fair that is held once a year. Our tech stack is: Common: Git, GitHub, GraphQL Backend: Kotlin, Ktor, PostgreSQL, Docker Frontend: React, TypeScript, Gatsby, Material-UI, Sass License \u00b6 All code is licensed under MIT.","title":"Home"},{"location":"#echo-karriere-documentation","text":"This site is the main collection of the whats and whys of the development team at echo karriere . It is a heavy work in progress, so expect changes to occur at a rapid pace.","title":"echo karriere documentation"},{"location":"#who","text":"echo karriere is developed by a team of student volunteers, in no particular order: Mathias B\u00f8e Sondre Nilsen Marie Heggebakk Karl Oscar Warpe Mathias Vab\u00f8 Christian Hein","title":"Who?"},{"location":"#what","text":"We develop the entire stack that runs the events that echo karriere arranges, primarily the career fair that is held once a year. Our tech stack is: Common: Git, GitHub, GraphQL Backend: Kotlin, Ktor, PostgreSQL, Docker Frontend: React, TypeScript, Gatsby, Material-UI, Sass","title":"What?"},{"location":"#license","text":"All code is licensed under MIT.","title":"License"},{"location":"backend/docker/","text":"Docker \u00b6 Docker is the most popular containerization stack around, and we use it for automatically setting up our database so that all developers are always on the same version of PostgreSQL. Installation \u00b6 Follow the instructions at their website ??? If you use Windows, pray it works Profit You should also install docker-compose , which may or may not be included in the installation bundle depending on which OS you're using. Consult the documentation. Configuring environment variables \u00b6 Before you start the database you need to create a file for the environment variables that will determine the name of the database and its user, the password and host. Make a copy of .env.example and name it .env . For developing it should look like the following: POSTGRES_DB = echokarriere POSTGRES_USER = karriere POSTGRES_PASSWORD = password POSTGRES_HOST = localhost Starting the database \u00b6 Once you've configured the .env file you can simply run docker-compose up -d to start the database in the background. To see what is happening run docker logs echo_backend_db , it might offer up a hint if it is not working. Connecting the database to WebStorm \u00b6 Since we're using IntelliJ for working on the backend you should add the database as a data source in the editor. On the right side of the editor, click on these buttons. Fill in the fields matching the data in your .env file. You may have to download a database driver, but IntelliJ will prompt you for this and automatically download and install it for you. Once you've successfully established a connection the Database tab will look like this. You'll now have access to a console where you can run SQL queries against our development database that will include auto completion for table names, columns and so on. Running a query against our database. The result of the SQL query.","title":"Docker"},{"location":"backend/docker/#docker","text":"Docker is the most popular containerization stack around, and we use it for automatically setting up our database so that all developers are always on the same version of PostgreSQL.","title":"Docker"},{"location":"backend/docker/#installation","text":"Follow the instructions at their website ??? If you use Windows, pray it works Profit You should also install docker-compose , which may or may not be included in the installation bundle depending on which OS you're using. Consult the documentation.","title":"Installation"},{"location":"backend/docker/#configuring-environment-variables","text":"Before you start the database you need to create a file for the environment variables that will determine the name of the database and its user, the password and host. Make a copy of .env.example and name it .env . For developing it should look like the following: POSTGRES_DB = echokarriere POSTGRES_USER = karriere POSTGRES_PASSWORD = password POSTGRES_HOST = localhost","title":"Configuring environment variables"},{"location":"backend/docker/#starting-the-database","text":"Once you've configured the .env file you can simply run docker-compose up -d to start the database in the background. To see what is happening run docker logs echo_backend_db , it might offer up a hint if it is not working.","title":"Starting the database"},{"location":"backend/docker/#connecting-the-database-to-webstorm","text":"Since we're using IntelliJ for working on the backend you should add the database as a data source in the editor. On the right side of the editor, click on these buttons. Fill in the fields matching the data in your .env file. You may have to download a database driver, but IntelliJ will prompt you for this and automatically download and install it for you. Once you've successfully established a connection the Database tab will look like this. You'll now have access to a console where you can run SQL queries against our development database that will include auto completion for table names, columns and so on. Running a query against our database. The result of the SQL query.","title":"Connecting the database to WebStorm"},{"location":"backend/editors/","text":"Editors \u00b6 Our backend is written in Kotlin, a language developed by JetBrains... the same people who develop IntelliJ IDEA. In other words, it is nearly mandatory to use it for developing with Kotlin. Configuration \u00b6 We're using ktlint to lint and format our code, you shouldn't have to install it however as it's included as a Gradle plugin instead. To configure ktlint to format code in IntelliJ and when you're comitting, run the following commands: ./gradlew ktlintApplyToIdea ./gradlew addKtlintCheckGitPreCommitHook The latter command will make it so you cannot commit code that is improperly formatted, so just be aware that if IntelliJ keeps failing to commit that is probably the reason.","title":"Editors"},{"location":"backend/editors/#editors","text":"Our backend is written in Kotlin, a language developed by JetBrains... the same people who develop IntelliJ IDEA. In other words, it is nearly mandatory to use it for developing with Kotlin.","title":"Editors"},{"location":"backend/editors/#configuration","text":"We're using ktlint to lint and format our code, you shouldn't have to install it however as it's included as a Gradle plugin instead. To configure ktlint to format code in IntelliJ and when you're comitting, run the following commands: ./gradlew ktlintApplyToIdea ./gradlew addKtlintCheckGitPreCommitHook The latter command will make it so you cannot commit code that is improperly formatted, so just be aware that if IntelliJ keeps failing to commit that is probably the reason.","title":"Configuration"},{"location":"common/commit-messages/","text":"Commit messages \u00b6 Due to how we manage our projects in a project board on Clubhouse there are requirements for how we structure commits so that they are properly tracked from GitHub and Clubhouse. In this doc we'll walk you through how to properly commit. Style \u00b6 Commit titles should be short and to the point, and if you are working on a story should follow a standardized structure: [CH-123]: Added foo for bar If the commit is directly related to a story you should have it at the beginning of your message. Note that this is not how Clubhouse wants you to format it by default, if you want to know why, see the why section . Fixed mistake introduced in last commit If your commit do not contain any kind of reference to a story in Clubhouse there are no errors and you can proceed as normal. If you attempt to commit using the wrong commit structure you will get an error explaining what is wrong: Added foo for bar [ch123] This will fail when you attempt to commit with the following error: You should start your commit message like this: '[CH-123]: <message>' . [ch-123]: Added foo for bar This will fail due to the case sensitivity. [CH-123] Added foo for bar This will fail because of a missing colon after the closing bracket. Why \u00b6 GitHub has a feature called autolinked references that enable you to reference issues and PRs across repositories and projects. This works very well inside GitHubs little bubble, but since we use Clubhouse we need to add external references to link from GitHub to Clubhouse. Now, on the other end Clubhouse wants us to use [ch123] to track issues, but GitHub (for whatever reason) require that the reference prefix is at least three characters long... which as you might imagine is an issue. Luckily Clubhouse supports references with a dash after the CH , so we need to enforce that commits using these references are properly formatted, hence the need for these guidelines.","title":"Committing"},{"location":"common/commit-messages/#commit-messages","text":"Due to how we manage our projects in a project board on Clubhouse there are requirements for how we structure commits so that they are properly tracked from GitHub and Clubhouse. In this doc we'll walk you through how to properly commit.","title":"Commit messages"},{"location":"common/commit-messages/#style","text":"Commit titles should be short and to the point, and if you are working on a story should follow a standardized structure: [CH-123]: Added foo for bar If the commit is directly related to a story you should have it at the beginning of your message. Note that this is not how Clubhouse wants you to format it by default, if you want to know why, see the why section . Fixed mistake introduced in last commit If your commit do not contain any kind of reference to a story in Clubhouse there are no errors and you can proceed as normal. If you attempt to commit using the wrong commit structure you will get an error explaining what is wrong: Added foo for bar [ch123] This will fail when you attempt to commit with the following error: You should start your commit message like this: '[CH-123]: <message>' . [ch-123]: Added foo for bar This will fail due to the case sensitivity. [CH-123] Added foo for bar This will fail because of a missing colon after the closing bracket.","title":"Style"},{"location":"common/commit-messages/#why","text":"GitHub has a feature called autolinked references that enable you to reference issues and PRs across repositories and projects. This works very well inside GitHubs little bubble, but since we use Clubhouse we need to add external references to link from GitHub to Clubhouse. Now, on the other end Clubhouse wants us to use [ch123] to track issues, but GitHub (for whatever reason) require that the reference prefix is at least three characters long... which as you might imagine is an issue. Luckily Clubhouse supports references with a dash after the CH , so we need to enforce that commits using these references are properly formatted, hence the need for these guidelines.","title":"Why"},{"location":"common/git/","text":"Git \u00b6 Tools \u00b6 This tutorial will use the command line to work through the example, though this could just as easily be done with the integrated git tools in either VSCode or in one of the JetBrains' products. Workflow \u00b6 It's recommended that you're somewhat familiar with working with git before reading this documentation, see our learning resources for a short introduction. What follows is a fairly quick introduction to how to use issues from Clubhouse, creating a new branch and a pull request to getting it merged. Aka the full flow of the workflow. Selecting an issue \u00b6 Start by looking for relevant issues on the story board, and then prioritize issues with labels. You can filter there views in the sidebar by creating a filter of what you want to show, e.g. only stories for the frontend project with a label of high or medium importance. Once you've found an issue in the Ready for Development column you can drag-and-drop it into the In Development column. This will automatically assign the story to you. Note Be careful to only select from the Ready for Development column, the Unscheduled column is for stories that are not yet ready to start on. Finding an issue Once you've found a relevant issue and dragged it to the correct column, you will be assigned as the author for this story and you are now ready to start working on it. You're now ready to start developing Working locally \u00b6 Now you're ready to start working on the issue locally. The first thing to do is to make sure you're on the master branch of the repository and that you have a clean slate and that you're up to date with the origin . Tip Use the following commands to get started: \u276f git checkout master Switched to branch 'master' Your branch is behind 'origin/master' by 26 commits, and can be fast-forwarded. (use \"git pull\" to update your local branch) Then run git pull to get the latest changes, if you have files that are not yet committed or you want to remove, you can either stash them or run git checkout -- <filename> to erase the local changes. \u276f git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean You are now ready to begin. Next, select the story to be taken into the details view and click on the git helper in the upper right corner. Helper menu Copy the contents of the bottom text area and paste it into your terminal. If you're using a GUI, copy the proper branch name from the upper text area and use it to create a new branch. \u276f git checkout -b feature/ch92/update-documentation Switched to a new branch 'feature/ch92/update-documentation' You can now start working on your feature/bug fix. \u276f git status On branch feature/ch92/update-documentation Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: docs/common/git.md Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/images/clubhouse-drag-n-drop.png docs/images/clubhouse-find-issue.png docs/images/clubhouse-git-helper.png no changes added to commit (use \"git add\" and/or \"git commit -a\") Here we can see that git.md file has been changed and that there are at least three new untracked files (i.e. files that did not exist before this commit). If you think everything is fine you can add everything, but this is not a healthy habit as you will end up accidentally adding and pushing things you didn't mean to. We will be risky and add everything at once; git add . . Running git status again now shows that we have changes added. \u276f git status On branch feature/ch92/update-documentation Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: docs/common/git.md new file: docs/images/clubhouse-drag-n-drop.png new file: docs/images/clubhouse-find-issue.png new file: docs/images/clubhouse-git-helper.png Committing \u00b6 We can now commit our changes and push them to a new branch on the remote server. You can either commit by running git commit and it'll open a window of whatever $EDITOR is set to on your OS or from the application that you're using (VSCode, WebStorm etc). On Linux it'll either open in nano or in vim for example, while on macOS it might be something else. Or you can commit by using the -m flag: git commit -m \"Message\" . \u276f git commit -m \"[CH-92]: Update documentation for Clubhouse\" [feature/ch92/update-documentation 7440b10] [CH-92]: Update documentation for Clubhouse 4 files changed, 73 insertions(+), 22 deletions(-) create mode 100644 docs/images/clubhouse-drag-n-drop.png create mode 100644 docs/images/clubhouse-find-issue.png create mode 100644 docs/images/clubhouse-git-helper.png Warning Read the commit documentation on how to structure your commits. Pushing \u00b6 We're now ready to push to our repository and create a new pull request. Simply run git push -u to create the branch on your remote (aka GitHub). \u276f git push -u Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 12 threads Compressing objects: 100% (8/8), done. Writing objects: 100% (9/9), 84.99 KiB | 17.00 MiB/s, done. Total 9 (delta 4), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (4/4), completed with 4 local objects. remote: remote: Create a pull request for 'feature/ch92/update-documentation' on GitHub by visiting: remote: https://github.com/echo-karriere/docs/pull/new/feature/ch92/update-documentation remote: To github.com:echo-karriere/docs.git * [new branch] feature/ch92/update-documentation -> feature/ch92/update-documentation Branch 'feature/ch92/update-documentation' set up to track remote branch 'feature/ch92/update-documentation' from 'origin'. Pull requests and Clubhouse \u00b6 You can use the link in the response from the remote to create the pull request. It will look something like this: The pull request view You should also assign the PR to yourself. If we now go back to Clubhouse, we'll see that the story has been moved to the Ready for Review column: The detailed view for the story should also reflect the new PR and commit: You can see the linked branch with its PR and the commit we made. And the PR on GitHub will also link back to Clubhouse. On GitHub we can see that the story reference in the brackets is a link. Next up is adding someone to review your code, this should happen automatically once people start committing code, but you can manually assign someone to the pull request. In this case I'll add Marie as a reviewer. Your reviewer will look over the code and might come with suggestions or request changes. In this case Marie requested some changes, which you may or may not agree with. Time to hash it out by discussing why you did things the way you did. Tip Just remember to be nice. Code reviews can feel personal and intimidating, but it's done both to learn and help our code stay maintainable. Once you're done with the requested changes, you can ask the person to review the pull request again. Or you might skip this entire step if everything looks peachy and the pull request is approved immediately. You are now ready to merge your pull request! Attention Pay close attention to the type of merge you're doing! In this case it will automatically be a regular merge, we prefer rebasing over merging in our projects. Select Rebase and merge from the dropdown to the right of the merge button. Or follow the instructions you are given in the pull request, occasionally we might want to squash instead if we have a bunch of temporary commits that we don't want to litter the history with. You'll be given a confirmation before merging so if you accidentally press the merge button, no worries. You might also be able to change the merge message, but this should be wholly unnessecary. Once your pull request is merged the corresponding story on Clubhouse will move to the Ready for Deploy column. Then, once it goes live someone will move the story to the Completed column. The end \u00b6 Huzzah, you have now gotten code into the main development branch, now go to the top and repeat","title":"Git"},{"location":"common/git/#git","text":"","title":"Git"},{"location":"common/git/#tools","text":"This tutorial will use the command line to work through the example, though this could just as easily be done with the integrated git tools in either VSCode or in one of the JetBrains' products.","title":"Tools"},{"location":"common/git/#workflow","text":"It's recommended that you're somewhat familiar with working with git before reading this documentation, see our learning resources for a short introduction. What follows is a fairly quick introduction to how to use issues from Clubhouse, creating a new branch and a pull request to getting it merged. Aka the full flow of the workflow.","title":"Workflow"},{"location":"common/git/#selecting-an-issue","text":"Start by looking for relevant issues on the story board, and then prioritize issues with labels. You can filter there views in the sidebar by creating a filter of what you want to show, e.g. only stories for the frontend project with a label of high or medium importance. Once you've found an issue in the Ready for Development column you can drag-and-drop it into the In Development column. This will automatically assign the story to you. Note Be careful to only select from the Ready for Development column, the Unscheduled column is for stories that are not yet ready to start on. Finding an issue Once you've found a relevant issue and dragged it to the correct column, you will be assigned as the author for this story and you are now ready to start working on it. You're now ready to start developing","title":"Selecting an issue"},{"location":"common/git/#working-locally","text":"Now you're ready to start working on the issue locally. The first thing to do is to make sure you're on the master branch of the repository and that you have a clean slate and that you're up to date with the origin . Tip Use the following commands to get started: \u276f git checkout master Switched to branch 'master' Your branch is behind 'origin/master' by 26 commits, and can be fast-forwarded. (use \"git pull\" to update your local branch) Then run git pull to get the latest changes, if you have files that are not yet committed or you want to remove, you can either stash them or run git checkout -- <filename> to erase the local changes. \u276f git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean You are now ready to begin. Next, select the story to be taken into the details view and click on the git helper in the upper right corner. Helper menu Copy the contents of the bottom text area and paste it into your terminal. If you're using a GUI, copy the proper branch name from the upper text area and use it to create a new branch. \u276f git checkout -b feature/ch92/update-documentation Switched to a new branch 'feature/ch92/update-documentation' You can now start working on your feature/bug fix. \u276f git status On branch feature/ch92/update-documentation Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: docs/common/git.md Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/images/clubhouse-drag-n-drop.png docs/images/clubhouse-find-issue.png docs/images/clubhouse-git-helper.png no changes added to commit (use \"git add\" and/or \"git commit -a\") Here we can see that git.md file has been changed and that there are at least three new untracked files (i.e. files that did not exist before this commit). If you think everything is fine you can add everything, but this is not a healthy habit as you will end up accidentally adding and pushing things you didn't mean to. We will be risky and add everything at once; git add . . Running git status again now shows that we have changes added. \u276f git status On branch feature/ch92/update-documentation Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: docs/common/git.md new file: docs/images/clubhouse-drag-n-drop.png new file: docs/images/clubhouse-find-issue.png new file: docs/images/clubhouse-git-helper.png","title":"Working locally"},{"location":"common/git/#committing","text":"We can now commit our changes and push them to a new branch on the remote server. You can either commit by running git commit and it'll open a window of whatever $EDITOR is set to on your OS or from the application that you're using (VSCode, WebStorm etc). On Linux it'll either open in nano or in vim for example, while on macOS it might be something else. Or you can commit by using the -m flag: git commit -m \"Message\" . \u276f git commit -m \"[CH-92]: Update documentation for Clubhouse\" [feature/ch92/update-documentation 7440b10] [CH-92]: Update documentation for Clubhouse 4 files changed, 73 insertions(+), 22 deletions(-) create mode 100644 docs/images/clubhouse-drag-n-drop.png create mode 100644 docs/images/clubhouse-find-issue.png create mode 100644 docs/images/clubhouse-git-helper.png Warning Read the commit documentation on how to structure your commits.","title":"Committing"},{"location":"common/git/#pushing","text":"We're now ready to push to our repository and create a new pull request. Simply run git push -u to create the branch on your remote (aka GitHub). \u276f git push -u Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 12 threads Compressing objects: 100% (8/8), done. Writing objects: 100% (9/9), 84.99 KiB | 17.00 MiB/s, done. Total 9 (delta 4), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (4/4), completed with 4 local objects. remote: remote: Create a pull request for 'feature/ch92/update-documentation' on GitHub by visiting: remote: https://github.com/echo-karriere/docs/pull/new/feature/ch92/update-documentation remote: To github.com:echo-karriere/docs.git * [new branch] feature/ch92/update-documentation -> feature/ch92/update-documentation Branch 'feature/ch92/update-documentation' set up to track remote branch 'feature/ch92/update-documentation' from 'origin'.","title":"Pushing"},{"location":"common/git/#pull-requests-and-clubhouse","text":"You can use the link in the response from the remote to create the pull request. It will look something like this: The pull request view You should also assign the PR to yourself. If we now go back to Clubhouse, we'll see that the story has been moved to the Ready for Review column: The detailed view for the story should also reflect the new PR and commit: You can see the linked branch with its PR and the commit we made. And the PR on GitHub will also link back to Clubhouse. On GitHub we can see that the story reference in the brackets is a link. Next up is adding someone to review your code, this should happen automatically once people start committing code, but you can manually assign someone to the pull request. In this case I'll add Marie as a reviewer. Your reviewer will look over the code and might come with suggestions or request changes. In this case Marie requested some changes, which you may or may not agree with. Time to hash it out by discussing why you did things the way you did. Tip Just remember to be nice. Code reviews can feel personal and intimidating, but it's done both to learn and help our code stay maintainable. Once you're done with the requested changes, you can ask the person to review the pull request again. Or you might skip this entire step if everything looks peachy and the pull request is approved immediately. You are now ready to merge your pull request! Attention Pay close attention to the type of merge you're doing! In this case it will automatically be a regular merge, we prefer rebasing over merging in our projects. Select Rebase and merge from the dropdown to the right of the merge button. Or follow the instructions you are given in the pull request, occasionally we might want to squash instead if we have a bunch of temporary commits that we don't want to litter the history with. You'll be given a confirmation before merging so if you accidentally press the merge button, no worries. You might also be able to change the merge message, but this should be wholly unnessecary. Once your pull request is merged the corresponding story on Clubhouse will move to the Ready for Deploy column. Then, once it goes live someone will move the story to the Completed column.","title":"Pull requests and Clubhouse"},{"location":"common/git/#the-end","text":"Huzzah, you have now gotten code into the main development branch, now go to the top and repeat","title":"The end"},{"location":"frontend/editors/","text":"Editors \u00b6 When it comes to working with frontend there are a couple of choices, though I personally recommend to use either VSCode or WebStorm. Keybinding notes \u00b6 I'll write the keys as Windows/Linux specific commands (i.e. using Ctrl instead of Cmd ), so for anyone using macOS you should in most cases be able to simply use that instead of what I'm writing. Fair warning though, JetBrains products have very different keybindings between macOS and Windows/Linux so it is less applicable there. VSCode \u00b6 VSCode is a fairly simple and barebones editor by default, so it's recommended that you install a couple of extensions. To install press Ctrl + Shift + P , write Install extension and then the name of the extension. Extension Name What ESLint dbaeumer.vscode-eslint Shows linting errors and enables autofixing in VSCode Prettier esbenp.prettier-vscode Show styling errors and autoformatting of code JS/TS mgmcdermott.vscode-language-babel Syntax highlighting for JS, TS, GraphQL and TSX Docker ms-azuretools.vscode-docker Enables Docker support Dotenv mikestead.dotenv Automatic handling of .env files SASS syler.sass-indented SASS and SCSS support IntelliCode VisualStudioExptTeam.vscodeintellicode Experimental plugin for better autocompletion You should also add a few recommended settings to your settings.json file. Run Ctrl + , to open the settings and paste in the following: { \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : true , \"editor.codeActionsOnSave\" : { \"source.fixAll\" : true }, \"typescript.updateImportsOnFileMove.enabled\" : \"always\" , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"[javascript]\" : { \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" }, \"[typescript]\" : { \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" } } You should also take a quick look at the documentation for VSCode, especially the Get Started section. WebStorm \u00b6 Compared to VSCode WebStorm is a full-fledged IDE with nearly everything supported out of the box. To start, open the settings by pressing Ctrl + Alt + S and do the following steps: Install the GraphQL plugin. Enable and configure ESLint. Enable and configure Prettier. NOTE: We updated the \"Run for files\" field too. If you want to learn to use WebStorm, and JetBrain's products in general, I recommend installing the Features Trainer plugin and following that to get a feel for how to work in an IDE. Install the Features Trainer.","title":"Editors"},{"location":"frontend/editors/#editors","text":"When it comes to working with frontend there are a couple of choices, though I personally recommend to use either VSCode or WebStorm.","title":"Editors"},{"location":"frontend/editors/#keybinding-notes","text":"I'll write the keys as Windows/Linux specific commands (i.e. using Ctrl instead of Cmd ), so for anyone using macOS you should in most cases be able to simply use that instead of what I'm writing. Fair warning though, JetBrains products have very different keybindings between macOS and Windows/Linux so it is less applicable there.","title":"Keybinding notes"},{"location":"frontend/editors/#vscode","text":"VSCode is a fairly simple and barebones editor by default, so it's recommended that you install a couple of extensions. To install press Ctrl + Shift + P , write Install extension and then the name of the extension. Extension Name What ESLint dbaeumer.vscode-eslint Shows linting errors and enables autofixing in VSCode Prettier esbenp.prettier-vscode Show styling errors and autoformatting of code JS/TS mgmcdermott.vscode-language-babel Syntax highlighting for JS, TS, GraphQL and TSX Docker ms-azuretools.vscode-docker Enables Docker support Dotenv mikestead.dotenv Automatic handling of .env files SASS syler.sass-indented SASS and SCSS support IntelliCode VisualStudioExptTeam.vscodeintellicode Experimental plugin for better autocompletion You should also add a few recommended settings to your settings.json file. Run Ctrl + , to open the settings and paste in the following: { \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : true , \"editor.codeActionsOnSave\" : { \"source.fixAll\" : true }, \"typescript.updateImportsOnFileMove.enabled\" : \"always\" , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"[javascript]\" : { \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" }, \"[typescript]\" : { \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" } } You should also take a quick look at the documentation for VSCode, especially the Get Started section.","title":"VSCode"},{"location":"frontend/editors/#webstorm","text":"Compared to VSCode WebStorm is a full-fledged IDE with nearly everything supported out of the box. To start, open the settings by pressing Ctrl + Alt + S and do the following steps: Install the GraphQL plugin. Enable and configure ESLint. Enable and configure Prettier. NOTE: We updated the \"Run for files\" field too. If you want to learn to use WebStorm, and JetBrain's products in general, I recommend installing the Features Trainer plugin and following that to get a feel for how to work in an IDE. Install the Features Trainer.","title":"WebStorm"},{"location":"resources/learning/","text":"Resources \u00b6 JetBrains : Get the JetBrains Student so you have all their products for free. GitHub : Get the GitHub Student Pack as it gives you tons of free resources. Kotlin : Do Kotlin Koans in IntelliJ. PostgreSQL : Basically INF115, Google is SQL's best friend. You should also take a look at Exposed as we use it as our SQL framework of choice React : Trial by fire, the React Tutorial is a small and nice introduction. You can and should also take a look at Frontend Masters that you get via the GitHub Student Pack for a ton courses on everything frontend. JavaScript/TypeScript : You Don't Know JS is a good introduction to modern JavaScript. As for TypeScript you might be able to guess that it's a strict syntactical superset that adds statical typing to JS. Their documentation is great, though you can also use TypeScript Deep Dive . GraphQL : A good introduction can be found in their documentation . If you want to try it out there's a bunch of example API you can use, for example Star Wars API . Git : A good introduction for how to develop with Git is Learn Git Branching . You should also read the short introduction to Trunk Based Development for an overview of how we want to work. Docker : There's a sweet and short introduction on their websites, though I recommend at least skimming Docker Curriculum (especially the Multi Container Environments section).","title":"Learning"},{"location":"resources/learning/#resources","text":"JetBrains : Get the JetBrains Student so you have all their products for free. GitHub : Get the GitHub Student Pack as it gives you tons of free resources. Kotlin : Do Kotlin Koans in IntelliJ. PostgreSQL : Basically INF115, Google is SQL's best friend. You should also take a look at Exposed as we use it as our SQL framework of choice React : Trial by fire, the React Tutorial is a small and nice introduction. You can and should also take a look at Frontend Masters that you get via the GitHub Student Pack for a ton courses on everything frontend. JavaScript/TypeScript : You Don't Know JS is a good introduction to modern JavaScript. As for TypeScript you might be able to guess that it's a strict syntactical superset that adds statical typing to JS. Their documentation is great, though you can also use TypeScript Deep Dive . GraphQL : A good introduction can be found in their documentation . If you want to try it out there's a bunch of example API you can use, for example Star Wars API . Git : A good introduction for how to develop with Git is Learn Git Branching . You should also read the short introduction to Trunk Based Development for an overview of how we want to work. Docker : There's a sweet and short introduction on their websites, though I recommend at least skimming Docker Curriculum (especially the Multi Container Environments section).","title":"Resources"}]}